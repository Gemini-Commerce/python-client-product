# coding: utf-8

"""
    Product Service

    API for managing products

    The version of the OpenAPI document: v1
    Contact: info@gemini-commerce.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from product.models.entitymanager_render_as import EntitymanagerRenderAs
from product.models.entitymanager_types import EntitymanagerTypes
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class EntitymanagerAttribute(BaseModel):
    """
    EntitymanagerAttribute
    """ # noqa: E501
    entity_id: Optional[StrictStr] = Field(default=None, alias="entityId")
    code: Optional[StrictStr] = None
    label: Optional[StrictStr] = None
    type: Optional[EntitymanagerTypes] = None
    option_list: Optional[StrictStr] = Field(default=None, alias="optionList")
    entity: Optional[StrictStr] = None
    default: Optional[StrictStr] = None
    is_required: Optional[StrictBool] = Field(default=None, alias="isRequired")
    is_system: Optional[StrictBool] = Field(default=None, alias="isSystem")
    is_repeated: Optional[StrictBool] = Field(default=None, alias="isRepeated")
    sort: Optional[StrictInt] = None
    group_code: Optional[StrictStr] = Field(default=None, alias="groupCode")
    title: Optional[Dict[str, StrictStr]] = None
    render_as: Optional[EntitymanagerRenderAs] = Field(default=None, alias="renderAs")
    __properties: ClassVar[List[str]] = ["entityId", "code", "label", "type", "optionList", "entity", "default", "isRequired", "isSystem", "isRepeated", "sort", "groupCode", "title", "renderAs"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of EntitymanagerAttribute from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of EntitymanagerAttribute from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "entityId": obj.get("entityId"),
            "code": obj.get("code"),
            "label": obj.get("label"),
            "type": obj.get("type"),
            "optionList": obj.get("optionList"),
            "entity": obj.get("entity"),
            "default": obj.get("default"),
            "isRequired": obj.get("isRequired"),
            "isSystem": obj.get("isSystem"),
            "isRepeated": obj.get("isRepeated"),
            "sort": obj.get("sort"),
            "groupCode": obj.get("groupCode"),
            "title": obj.get("title"),
            "renderAs": obj.get("renderAs")
        })
        return _obj


