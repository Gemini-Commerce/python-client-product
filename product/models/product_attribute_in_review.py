# coding: utf-8

"""
    Product Service

    Introducing our revolutionary Product Management Service! Designed to streamline your product inventory and elevate customer experiences, our cutting-edge protobuf service is a game-changer in the world of efficient product management.  With our service, you can effortlessly create new products, allowing you to quickly bring your ideas to life and expand your catalog. Retrieve product information in a snap, providing accurate and personalized details to your customers based on their specific needs and preferences.  Stay ahead of the competition by easily updating product information, ensuring your catalog is always up-to-date and optimized. Seamlessly remove products from your inventory when needed, maintaining a clean and relevant product selection.  Enhance the visual appeal of your products with our advanced media gallery functionalities. Effortlessly add and update captivating images and videos to showcase your products in the best possible light, engaging your customers and driving conversions.  Personalization is key in today's market, and our service enables you to offer unique options to your customers. Easily create and manage lists of customizable options for your products, providing flexibility and tailoring to individual preferences.  Attributes play a vital role in defining products, and our service empowers you to effectively manage them. From bulk attribute creation to listing and retrieving attribute options, our service ensures your product information is rich and comprehensive.  Our service extends its capabilities to entity management, allowing you to effortlessly handle different entities and create customized options lists associated with them. This provides further flexibility and customization options for your product offerings.  When it comes to bulk updates, our service has you covered. Effortlessly update multiple products simultaneously, saving you time and streamlining your operations.  Finding specific products and variants is a breeze with our service. Quickly locate products based on their unique stock keeping unit (SKU) values, ensuring efficient inventory management and smooth order fulfillment.  Experience a new level of efficiency and productivity with our Product Management Service. Unlock the full potential of streamlined product management and empower your business to thrive in today's competitive market. Try our service today and elevate your product management to new heights!

    The version of the OpenAPI document: v1
    Contact: info@gemini-commerce.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr
from pydantic import Field
from product.models.attribute_in_review_string import AttributeInReviewString
from product.models.product_attribute_in_review_error import ProductAttributeInReviewError
from product.models.product_attribute_in_review_job_type import ProductAttributeInReviewJobType
from product.models.product_attribute_in_review_source import ProductAttributeInReviewSource
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ProductAttributeInReview(BaseModel):
    """
    ProductAttributeInReview
    """ # noqa: E501
    code: Optional[StrictStr] = None
    string: Optional[AttributeInReviewString] = None
    int32: Optional[StrictInt] = None
    int64: Optional[StrictStr] = None
    float32: Optional[Union[StrictFloat, StrictInt]] = None
    float64: Optional[Union[StrictFloat, StrictInt]] = None
    boolean: Optional[StrictBool] = None
    source: Optional[ProductAttributeInReviewSource] = None
    created_at: Optional[datetime] = Field(default=None, alias="createdAt")
    job_id: Optional[StrictStr] = Field(default=None, alias="jobId")
    job_type: Optional[ProductAttributeInReviewJobType] = Field(default=None, alias="jobType")
    error: Optional[ProductAttributeInReviewError] = None
    __properties: ClassVar[List[str]] = ["code", "string", "int32", "int64", "float32", "float64", "boolean", "source", "createdAt", "jobId", "jobType", "error"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ProductAttributeInReview from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of string
        if self.string:
            _dict['string'] = self.string.to_dict()
        # override the default output from pydantic by calling `to_dict()` of error
        if self.error:
            _dict['error'] = self.error.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ProductAttributeInReview from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "code": obj.get("code"),
            "string": AttributeInReviewString.from_dict(obj.get("string")) if obj.get("string") is not None else None,
            "int32": obj.get("int32"),
            "int64": obj.get("int64"),
            "float32": obj.get("float32"),
            "float64": obj.get("float64"),
            "boolean": obj.get("boolean"),
            "source": obj.get("source"),
            "createdAt": obj.get("createdAt"),
            "jobId": obj.get("jobId"),
            "jobType": obj.get("jobType"),
            "error": ProductAttributeInReviewError.from_dict(obj.get("error")) if obj.get("error") is not None else None
        })
        return _obj


