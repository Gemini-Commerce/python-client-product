# coding: utf-8

"""
    Product Service

    Introducing our revolutionary Product Management Service! Designed to streamline your product inventory and elevate customer experiences, our cutting-edge protobuf service is a game-changer in the world of efficient product management.  With our service, you can effortlessly create new products, allowing you to quickly bring your ideas to life and expand your catalog. Retrieve product information in a snap, providing accurate and personalized details to your customers based on their specific needs and preferences.  Stay ahead of the competition by easily updating product information, ensuring your catalog is always up-to-date and optimized. Seamlessly remove products from your inventory when needed, maintaining a clean and relevant product selection.  Enhance the visual appeal of your products with our advanced media gallery functionalities. Effortlessly add and update captivating images and videos to showcase your products in the best possible light, engaging your customers and driving conversions.  Personalization is key in today's market, and our service enables you to offer unique options to your customers. Easily create and manage lists of customizable options for your products, providing flexibility and tailoring to individual preferences.  Attributes play a vital role in defining products, and our service empowers you to effectively manage them. From bulk attribute creation to listing and retrieving attribute options, our service ensures your product information is rich and comprehensive.  Our service extends its capabilities to entity management, allowing you to effortlessly handle different entities and create customized options lists associated with them. This provides further flexibility and customization options for your product offerings.  When it comes to bulk updates, our service has you covered. Effortlessly update multiple products simultaneously, saving you time and streamlining your operations.  Finding specific products and variants is a breeze with our service. Quickly locate products based on their unique stock keeping unit (SKU) values, ensuring efficient inventory management and smooth order fulfillment.  Experience a new level of efficiency and productivity with our Product Management Service. Unlock the full potential of streamlined product management and empower your business to thrive in today's competitive market. Try our service today and elevate your product management to new heights!

    The version of the OpenAPI document: v1
    Contact: info@gemini-commerce.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, ClassVar, Dict, List, Optional
from pydantic import BaseModel, StrictBool, StrictInt, StrictStr
from pydantic import Field
from product.models.product_assets import ProductAssets
from product.models.product_localized_text import ProductLocalizedText
from product.models.product_media_gallery import ProductMediaGallery
from product.models.product_product_variant import ProductProductVariant
from product.models.protobuf_any import ProtobufAny
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class ProductProductEntity(BaseModel):
    """
    ProductProductEntity
    """ # noqa: E501
    tenant_id: Optional[StrictStr] = Field(default=None, alias="tenantId")
    grn: Optional[StrictStr] = None
    entity_type: Optional[StrictStr] = Field(default=None, alias="entityType")
    entity_code: Optional[StrictStr] = Field(default=None, alias="entityCode")
    id: Optional[StrictStr] = None
    code: Optional[StrictStr] = None
    variant_attributes: Optional[List[StrictStr]] = Field(default=None, alias="variantAttributes")
    is_configurable: Optional[StrictBool] = Field(default=None, alias="isConfigurable")
    is_virtual: Optional[StrictBool] = Field(default=None, alias="isVirtual")
    is_giftcard: Optional[StrictBool] = Field(default=None, alias="isGiftcard")
    has_configurator: Optional[StrictBool] = Field(default=None, alias="hasConfigurator")
    url_key: Optional[ProductLocalizedText] = Field(default=None, alias="urlKey")
    media_variant_attributes: Optional[List[StrictStr]] = Field(default=None, alias="mediaVariantAttributes")
    attributes: Optional[Dict[str, ProtobufAny]] = None
    variants: Optional[Dict[str, ProductProductVariant]] = None
    media_gallery: Optional[ProductMediaGallery] = Field(default=None, alias="mediaGallery")
    max_saleable_quantity: Optional[StrictInt] = Field(default=None, alias="maxSaleableQuantity")
    assets: Optional[ProductAssets] = None
    in_review: Optional[StrictBool] = Field(default=None, alias="inReview")
    created_at: Optional[StrictStr] = Field(default=None, alias="createdAt")
    updated_at: Optional[StrictStr] = Field(default=None, alias="updatedAt")
    __properties: ClassVar[List[str]] = ["tenantId", "grn", "entityType", "entityCode", "id", "code", "variantAttributes", "isConfigurable", "isVirtual", "isGiftcard", "hasConfigurator", "urlKey", "mediaVariantAttributes", "attributes", "variants", "mediaGallery", "maxSaleableQuantity", "assets", "inReview", "createdAt", "updatedAt"]

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of ProductProductEntity from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
                "grn",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of url_key
        if self.url_key:
            _dict['urlKey'] = self.url_key.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in attributes (dict)
        _field_dict = {}
        if self.attributes:
            for _key in self.attributes:
                if self.attributes[_key]:
                    _field_dict[_key] = self.attributes[_key].to_dict()
            _dict['attributes'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in variants (dict)
        _field_dict = {}
        if self.variants:
            for _key in self.variants:
                if self.variants[_key]:
                    _field_dict[_key] = self.variants[_key].to_dict()
            _dict['variants'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of media_gallery
        if self.media_gallery:
            _dict['mediaGallery'] = self.media_gallery.to_dict()
        # override the default output from pydantic by calling `to_dict()` of assets
        if self.assets:
            _dict['assets'] = self.assets.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of ProductProductEntity from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "tenantId": obj.get("tenantId"),
            "grn": obj.get("grn"),
            "entityType": obj.get("entityType"),
            "entityCode": obj.get("entityCode"),
            "id": obj.get("id"),
            "code": obj.get("code"),
            "variantAttributes": obj.get("variantAttributes"),
            "isConfigurable": obj.get("isConfigurable"),
            "isVirtual": obj.get("isVirtual"),
            "isGiftcard": obj.get("isGiftcard"),
            "hasConfigurator": obj.get("hasConfigurator"),
            "urlKey": ProductLocalizedText.from_dict(obj.get("urlKey")) if obj.get("urlKey") is not None else None,
            "mediaVariantAttributes": obj.get("mediaVariantAttributes"),
            "attributes": dict(
                (_k, ProtobufAny.from_dict(_v))
                for _k, _v in obj.get("attributes").items()
            )
            if obj.get("attributes") is not None
            else None,
            "variants": dict(
                (_k, ProductProductVariant.from_dict(_v))
                for _k, _v in obj.get("variants").items()
            )
            if obj.get("variants") is not None
            else None,
            "mediaGallery": ProductMediaGallery.from_dict(obj.get("mediaGallery")) if obj.get("mediaGallery") is not None else None,
            "maxSaleableQuantity": obj.get("maxSaleableQuantity"),
            "assets": ProductAssets.from_dict(obj.get("assets")) if obj.get("assets") is not None else None,
            "inReview": obj.get("inReview"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt")
        })
        return _obj


